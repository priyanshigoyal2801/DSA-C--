#include <bits/stdc++.h>
using namespace std;

int sparse[5][5], i, j, m, n, ctr = 0;

int** transpose(int ctr, int m, int n){
    int trip[ctr + 1][3];
    trip[0][0] = m;
    trip[0][1] = n;
    trip[0][2] = ctr;
    int k = 1;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (sparse[i][j] != 0)
            {
                trip[k][0] = i;
                trip[k][1] = j;
                trip[k][2] = sparse[i][j];
                k++;
            }
        }
    }

    int maxCol = trip[1][1];
    int maxCol1 = INT_MIN;
    for (int i = 1; i <= ctr; i++){
        if (trip[i][1] > maxCol1)
            maxCol1 = trip[i][1];
        maxCol = max(maxCol, maxCol1);
    }

    int total[maxCol + 1][2];

    for (int i = 0; i <= maxCol; i++){
        total[i][0] = i;
        total[i][1] = 0;
    }

    for (int i = 1; i <= ctr; i++){
        if (trip[i][1] <= maxCol){
            total[trip[i][1]][1]++;
        }
    }

    int incident[maxCol + 2][2];

    for (int i = 0; i <= maxCol + 1; i++){
        incident[i][0] = i;
        incident[i][1] = 0;
    }
    incident[0][1] = 1;
    for (int i = 1; i <= maxCol + 1; i++){
        incident[i][1] = incident[i - 1][1] + total[i - 1][1];
    }

    int** answer = new int*[ctr + 1];
    for (int i = 0; i <= ctr; i++){
        answer[i] = new int[3];
    }

    answer[0][0] = trip[0][1];
    answer[0][1] = trip[0][0];
    answer[0][2] = trip[0][2];

    for (int i = 1; i <= ctr; i++){
        answer[incident[trip[i][1]][1]][0] = trip[i][1];
        answer[incident[trip[i][1]][1]][1] = trip[i][0];
        answer[incident[trip[i][1]][1]][2] = trip[i][2];
        incident[trip[i][1]][1]++;
    }

    return answer;
}